{"version":3,"sources":["Buttons/index.js","components/Header.js","components/utils.js","components/InputCase.js","components/EditCaseModal.js","components/ShowDetailsModal.js","components/DeleteCase.js","components/ListCase.js","components/ModalAdd.js","components/AddInitial.js","components/Footer.js","services/UserService.js","components/Login.js","components/LogoutButton.js","App.js","reportWebVitals.js","services/HttpService.js","index.js"],"names":["Component","Header","className","getParsedDate","strDate","strSplitDate","String","split","date","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","toString","IROList","id","name","insurerList","decisionOptions","Checkbox","checked","onChangeFunction","type","onChange","InputCase","useState","dateforwarded","setDateForwarded","caseid","setCaseId","patientid","setPatientId","insurerid","setInsurerId","providerid","setProviderId","iroid","setIROId","expedited","setExpedited","denialreason","setDenialReason","eligibilitynotice","setEligibilityNotice","eligiblecorrespondence","setEligibleCorrespondence","insurernotified","setInsurerNotified","irodecision","setIRODecision","decisiondate","setDecisionDate","fileclosed","setFileClosed","invoiceamount","setInvoiceAmount","onSubmitForm","e","a","preventDefault","body","fetch","method","headers","JSON","stringify","response","console","log","Window","location","error","message","addCase","data","alert","window","reload","onSubmit","DatePicker","defaultValue","valueEditFormat","dateStyle","valueDisplayFormat","value","target","for","DropdownList","dataKey","textField","NumberPicker","step","max","min","format","style","currency","onClick","EditCaseModal","extcase","rep","parseInt","show","setShow","handleClose","id_to_edit","updateCase","onHide","backdrop","keyboard","size","content","display","closeButton","Title","Body","class","Footer","ShowDetailsModal","cursor","color","fontWeight","DeleteCase","deleteCase","data-toggle","data-target","data-dismiss","ListCase","cases","setCases","filteredCases","setFilteredCases","searchTerm","setSearchTerm","filterSearchTerm","setFilterSearchTerm","renderTooltip","props","Tooltip","getCases","json","jsonData","rows","useEffect","keyword","filtered","filter","entry","includes","patientlname","patientfname","filterArray","OverlayTrigger","placement","delay","hide","overlay","map","insurername","providername","ironame","Modal","showModal","setState","hideModal","handleChange","state","patient","bind","this","React","AddInitial","modal","toggleMenu","href","_kc","require","Keycloak","doLogin","login","doLogout","logout","UserService","initKeycloak","onAuthenticatedCallback","init","onLoad","silentCheckSsoRedirectUri","silentCheckSsoFallback","pkceMethod","then","authenticated","catch","isLoggedIn","token","getToken","updateToken","successCallback","getUsername","tokenParsed","preferred_username","hasRole","roles","some","role","hasRealmRole","LogoutButton","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","_axios","axios","create","HttpService","HttpMethods","GET","POST","DELETE","configure","interceptors","request","use","config","Authorization","Promise","resolve","getAxiosClient","renderApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52ab7871.chunk.js","sourcesContent":["// CMS Data\n// Buttons Index.js\n\nimport React, { Component } from \"react\";\nimport './index.css'\n\nclass Button extends Component {\n  render() {\n    const {\n      onClick,\n      className,\n      children,\n      value,\n    } = this.props;\n\n    return (\n      <button\n      onClick={onClick}\n      className={className}\n      type=\"button\"\n      value={value}\n      >\n        {value}\n      </button>\n    );\n  }\n}\n\nexport { Button };","import React, { Fragment, useState } from 'react';\n\nconst Header = () => {\n\nreturn (\n  <Fragment>\n    <h1 className=\"text-center mt-5\">External Review Case List</h1>\n  </Fragment>\n)\n\n}\n\nexport default Header;","export function getParsedDate(strDate) {\n  if (strDate === null) {\n    return null;\n  } else {\n  var strSplitDate = String(strDate).split(' ');\n  var date = new Date(strSplitDate[0]);\n  // alert(date);\n  var dd = date.getDate();\n  var mm = date.getMonth() + 1; //January is 0!\n\n  var yyyy = date.getFullYear();\n  if (dd < 10) {\n      dd = '0' + dd;\n  }\n  if (mm < 10) {\n      mm = '0' + mm;\n  }\n  date =  yyyy + \"-\" + mm + \"-\" + dd;\n  return date.toString();\n}\n}\nexport const IROList = [\n  { id: 'null', name: 'Unassigned'},\n  { id: 'iro01', name: 'MCMC Services'},\n  { id: 'iro02', name: 'Medical Consultants Network'},\n  { id: 'iro03', name: 'H.H.C Group' },\n  { id: 'iro04', name: 'HHC Group' },\n  { id: 'iro05', name: 'MET Healthcare Solutions'},\n  { id: 'iro06', name: 'NMR'},\n  { id: 'iro07', name: 'Network Medical Review' },\n  { id: 'iro08', name: 'MCN' },\n  { id: 'iro09', name: 'National Medical Review' },\n]\nexport const insurerList = [\n  { id: 'ins01', name: 'Blue Cross'},\n  { id: 'ins02', name: 'Golden Rule'},\n  { id: 'ins03', name: 'Bright Health' },\n  { id: 'ins04', name: 'Cigna' },\n  { id: 'ins05', name: 'Blue Cross'},\n  { id: 'ins06', name: 'Golden Rule'},\n  { id: 'ins07', name: 'Bright Health' },\n  { id: 'ins08', name: 'Cigna' },\n  { id: 'ins09', name: 'Federated Insurance'},\n  { id: 'ins10', name: 'Golden Rule'},\n  { id: 'ins11', name: 'Bright Health' },\n  { id: 'ins12', name: 'National Health Insurance Company' },\n]\nexport const decisionOptions = ['No Decision Yet', 'Upheld', 'Overturned', 'Partially Overturned'];\n\nconst iroListOriginal = ['UNASSIGNED', 'CoreVisory', 'Maximus', 'C2C', 'HHC Group', 'Claims Eval', 'NMR', 'MRIoA', 'MCN', 'MET', 'ProPeer']\nconst insurerListOriginal = ['BCBS', 'United', 'Aetna', 'Golden Rule', 'Medica', 'HMR', 'Oscar', 'Centene'];\n\nexport const Checkbox = ({ id, name, checked, onChangeFunction }) =>\n(\n  <div>\n  <input\n    type = \"checkbox\"\n    id = { id }\n    name = { name }\n    checked = { checked }\n    onChange={ onChangeFunction }\n  />\n  </div>\n);","import React, { Fragment, useState } from 'react';\nimport DatePicker from \"react-widgets/DatePicker\";\nimport Calendar from \"react-widgets/Calendar\";\nimport DropdownList from \"react-widgets/DropdownList\";\nimport NumberPicker from \"react-widgets/NumberPicker\";\nimport Combobox from \"react-widgets/Combobox\";\nimport \"react-widgets/styles.css\";\nimport \"../styles/InputCase.css\";\nimport { insurerList, IROList, decisionOptions, Checkbox } from './utils.js';\n\n// Find out why the /api/eligiblecases is not what I am using...where did I set that up at?\nconst enterCase = async() => {\n  try{\n    const caseOne = await fetch(\"http://localhost:3001/api/eligiblecases\")\n    //const jsonData = await response.json()\n\n    //setCases(jsonData); //Using setCases is the only way to change the state\n  } catch (err) {\n    console.error(err.message)\n  }\n}\n\nconst InputCase = () => {\n// Shit, Dates...ugh\n    const [dateforwarded, setDateForwarded] = useState(\"\");\n    const [caseid, setCaseId] = useState(\"\");\n    const [patientid, setPatientId] = useState(\"\");\n    const [rep, setRep] = useState(\"\");\n    const [insurerid, setInsurerId] = useState(\"\");\n    const [providerid, setProviderId] = useState(\"\");\n    const [iroid, setIROId] = useState(\"\");\n    const [expedited, setExpedited] = useState(false);\n    const [denialreason, setDenialReason] = useState(\"\");\n    const [eligibilitynotice, setEligibilityNotice] = useState(\"\");\n    const [eligiblecorrespondence, setEligibleCorrespondence] = useState(\"\");\n    const [insurernotified, setInsurerNotified] = useState(\"\");\n    const [irodecision, setIRODecision] = useState(\"\");\n    const [decisiondate, setDecisionDate] = useState(\"\");\n    const [fileclosed, setFileClosed] = useState(\"\");\n    const [invoiceamount, setInvoiceAmount] = useState(\"\");\n\n    //Phew, changed onSubmitForm instead of chaning addCase().  addCase() is what gets called and executed by Add button.\n    //Can probably get rid of onSubmitForm\n    const onSubmitForm = async e => {\n      e.preventDefault();\n      try{\n        const body = {dateforwarded, caseid, patientid, insurerid, providerid, iroid, denialreason,\n                      eligibilitynotice, eligiblecorrespondence, insurernotified, decisiondate, \n                      irodecision, fileclosed, invoiceamount };\n        const response = await fetch(\"http://localhost:3001/eligibilecases\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body)\n      });\n      console.log('OnSubForm' + response);\n      Window.location = \"/\"; //This will make it refresh and show changes - instead of console.log\n      } catch (err) {\n        console.error(err.message)\n      }\n    };\n\n    // Doesnt need to be asnyc because not actually writing to DB, just getting the query set up for when we actually hit submit \n    // Figure out how to use useState state var\n\n    const SelectBox = ({className, label, name, options, stateVar, onChangeFunction}) => \n      (\n        <div className={className}>\n        <label>{ label }</label>\n        <select name={ name } onChange={ onChangeFunction }>\n          if (options)\n            {options.map((value, index) => {\n            return <option key={index}>{value}</option>\n            })}\n        </select>\n        </div>\n      )\n//You are dumb==not seeing time and expedited in state of list because you are not sending it in the request to be saved in the db (below)\n//add expedited, dateforwarded, and all else to the const data\n    const addCase = async e => {\n      e.preventDefault();\n        try {\n          const data = {dateforwarded, caseid, patientid, insurerid, providerid, iroid, denialreason,\n            eligibilitynotice, eligiblecorrespondence, insurernotified, decisiondate, \n            irodecision, fileclosed, invoiceamount };\n          const response = await fetch(`http://localhost:3001/eligiblecases`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data)\n          })\n          console.log('addCase' + response);\n          alert('Sucessfully Added Case # ' + caseid);\n          window.location.reload();\n          //Window.location = \"/\"; //This will make it refresh and show changes - instead of console.log\n        } catch (err) {\n          console.error(err.message);\n          alert('Unable to Add Case # ' + caseid + '; Message = ' + err.message);\n        }\n      }\n//Not getting an error message ^^ because its not returning bad - its pending. So invalid syntax when do patient = p01 just sits pending.\n//Remember the network tab when trying to send updates with bad sql = pending.\n//So add a timeout to the request in order to get an error message to display to user? Validation on client side first?  Also?\n//Update - I think timer sounds best\n\n      /* formingQuery() when click add button\n      \n          INSERT INTO eligiblecases(CaseID, PatientName, Insurer, IRO, DenialReason...)\n          VALUES (`useState.caseid .... that might not be right but you get the idea */\n  \n     /* handleSelectboxChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = target.value;\n    \n        this.setState(() => ({[name]: event.target.value}));\n      } */\n\n    return ( \n    <Fragment>\n      <form className='modal-form' onSubmit={onSubmitForm}> \n        \n          <div className=\"leftInputCase\">\n        <label>Date Forwarded</label>\n        <DatePicker className='form-control'\n          defaultValue={new Date()}\n          valueEditFormat={{ dateStyle: \"short\" }}\n          valueDisplayFormat={{ dateStyle: \"medium\" }}\n          onChange={value => setDateForwarded(value)}\n        />\n        {/*<label>Date Received</label>\n        <Calendar\n          value={new Date()}\n          onChange={value => setDate(value)}\n        />*/}\n        \n        {/*<AddEligibleCase />*/}\n        <label>Case ID</label>\n        <input\n          type='text' \n          className='form-control'\n          value={caseid} \n          onChange={e => setCaseId(e.target.value)}/>\n        <label for=\"modal_chkbx\">Expedited</label>\n        <Checkbox\n          id=\"modal_chkbx\"\n          className='form-control'\n          name='expedited'\n          checked={expedited}\n          onChangeFunction={() => setExpedited(!expedited)}\n        />\n        <label>Patient ID</label>\n        <input \n          type='text'\n          className='form-control' \n          value={patientid} \n          onChange={e => setPatientId(e.target.value)}/>\n        <label>Insurer</label>\n        <DropdownList className='form-control'\n            defaultValue=\"ins01\"\n            data={insurerList}\n            dataKey='id'\n            textField='name'\n            onChange={value => setInsurerId(value.id)}\n        />\n        <label>Provider ID</label>\n        <input \n          type='text'\n          className='form-control' \n          value={providerid} \n          onChange={e => setProviderId(e.target.value)}/>\n        <label>Denial Reason</label>  \n        <input \n          type=\"text\" \n          className=\"form-control\" \n          value={denialreason} \n          onChange={e => setDenialReason(e.target.value)}/>\n        <label>Eligibility Notice</label>  \n        <DatePicker className='form-control'\n          defaultValue={new Date()}\n          valueEditFormat={{ dateStyle: \"short\" }}\n          valueDisplayFormat={{ dateStyle: \"medium\" }}\n          onChange={value => setEligibilityNotice(value)}\n        />\n        </div>\n        <div className=\"rightInputCase\">\n        <label>Eligibility Correspondence</label>  \n        <DatePicker className='form-control'\n          defaultValue={new Date()}\n          valueEditFormat={{ dateStyle: \"short\" }}\n          valueDisplayFormat={{ dateStyle: \"medium\" }}\n          onChange={value => setEligibleCorrespondence(value)}\n        />\n        <label>Insurer Notified</label>  \n        <DatePicker className='form-control'\n          defaultValue={new Date()}\n          valueEditFormat={{ dateStyle: \"short\" }}\n          valueDisplayFormat={{ dateStyle: \"medium\" }}\n          onChange={value => setInsurerNotified(value)}\n        />\n        <label>IRO</label>\n        <DropdownList className='form-control'\n            defaultValue=\"null\"\n            data={IROList}\n            dataKey='id'\n            textField='name'\n            onChange={value => setIROId(value.id)}\n        />\n\n        <label>Decision Date</label>\n        <DatePicker className='form-control'\n          defaultValue={new Date()}\n          valueEditFormat={{ dateStyle: \"short\" }}\n          valueDisplayFormat={{ dateStyle: \"medium\" }}\n          onChange={value => setDecisionDate(value)}\n        />\n        <label>IRO Decision</label>\n        <DropdownList className='form-control'\n            defaultValue=\"No Decision Yet\"\n            data={decisionOptions}\n            onChange={value => setIRODecision(value)}\n        />\n        <label>File Closed</label>\n        <DatePicker className='form-control'\n          defaultValue={new Date()}\n          valueEditFormat={{ dateStyle: \"short\" }}\n          valueDisplayFormat={{ dateStyle: \"medium\" }}\n          onChange={value => setFileClosed(value)}\n        />\n        <label>Invoice Amount</label>\n        <NumberPicker className='form-control'\n          defaultValue={500.00}\n          step={50}\n          max={2000}\n          min={0}\n          format={{ style: \"currency\", currency: \"USD\" }}\n          onChange={value => setInvoiceAmount(value)}\n        />\n        </div>\n\n        <button className=\"btn btn-success\" onClick={addCase}>Add</button>\n        \n      </form>\n    </Fragment>\n    )\n}\n\nexport default InputCase;\n\n\n// d-flex makes sure the text field and the button are placed together side by side; mt-5 is margin-top 5\n// Figure out how to pass state down, because I need to change state in ModalAdd to hide it when click close","import React, { Fragment, useState } from 'react';\nimport { insurerList, IROList, decisionOptions, Checkbox } from './utils.js';\nimport DatePicker from \"react-widgets/DatePicker\";\nimport DropdownList from \"react-widgets/DropdownList\";\nimport NumberPicker from \"react-widgets/NumberPicker\";\nimport Modal from 'react-bootstrap/Modal'\nimport { getParsedDate } from './utils.js';\n\n\nconst EditCaseModal = ({ extcase }) => {\n\n\n  const [dateforwarded, setDateForwarded] = useState(extcase.dateforwarded);\n  const [caseid, setCaseId] = useState(extcase.caseid);\n  const [patientid, setPatientId] = useState(extcase.patientid);\n  const [rep, setRep] = useState(extcase.rep);\n  const [insurerid, setInsurerId] = useState(extcase.insurerid);\n  const [providerid, setProviderId] = useState(extcase.providerid);\n  const [denialreason, setDenialReason] = useState(extcase.denialreason);\n  const [iroid, setIROId] = useState(extcase.iroid);\n  const [expedited, setExpedited] = useState(extcase.expedited);\n  const [irodecision, setIRODecision] = useState(extcase.irodecision);\n  const [decisiondate, setDecisionDate] = useState(extcase.decisiondate);\n  const [eligibilitynotice, setEligibilityNotice] = useState(extcase.eligibilitynotice);\n  const [eligiblecorrespondence, setEligibleCorrespondence] = useState(extcase.eligiblecorrespondence);\n  const [insurernotified, setInsurerNotified] = useState(extcase.insurernotified);\n  const [fileclosed, setFileClosed] = useState(extcase.fileclosed);\n  const [invoiceamount, setInvoiceAmount] = useState(parseInt(extcase.invoiceamount));\n//rep is #4 which is underfined - in state when open edit - make sure that is not messing anything up\n\n  // Edit denialReason function\n  /*\n  const updateDenialReason = async (e) => {\n    e.preventDefault();\n    try{\n      const body = { denialreason };\n      const response = await fetch(`http://localhost:3001/eligiblecases/${extcase.caseid}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body)\n      })\n\n      Window.location = \"/\";\n\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n  */\n    const [show, setShow] = useState(false);\n  \n    const handleClose = () => {\n      setShow(false);\n      //window.location.reload();\n      //Want it to reload when an edit is done, so db can refresh (if needs to) but diable for now b/c not editing cases really\n    }\n    const handleShow = () => setShow(true);\n    const id_to_edit = extcase.caseid;\n  \n    const updateCase = async e => {\n      e.preventDefault();\n        try {\n          //const id_to_edit = e.target.value;\n          const data = {id_to_edit, dateforwarded, caseid, patientid, insurerid, providerid, iroid, denialreason,\n            eligibilitynotice, eligiblecorrespondence, insurernotified, decisiondate, irodecision, fileclosed, invoiceamount};\n          const response = await fetch(`http://localhost:3001/eligiblecases`, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data)\n          })\n          console.log('updateCase' + response);\n          alert('Sucessfully Updated Case # ' + id_to_edit);\n          window.location.reload();\n          //Window.location = \"/\"; //This will make it refresh and show changes - instead of console.log\n          //To update through state would be better, but not the best with DB and lots of records -- e.g. setCart(cart => [...cart, item]);\n        } catch (err) {\n          console.error(err.message);\n          alert('Unable to Update.  Please Check SQL'); //Probably need a timer\n        }\n      }\n\n\n    return (\n    <Fragment>\n      <button type=\"button\" className=\"btn btn-info\" onClick={handleShow} value={id_to_edit}>\n        Edit\n      </button>\n\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n        size={'lg'}\n        style={{\n          content:{\n            display: 'inline'\n          }\n        }}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Case</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n        <div className=\"mb-container\">\n        <div className=\"flex-row\">\n            <label>Date Forwarded</label>\n              <DatePicker className='form-control'\n                defaultValue={new Date(extcase.dateforwarded)}\n                valueEditFormat={{ dateStyle: \"short\" }}\n                valueDisplayFormat={{ dateStyle: \"medium\" }}\n                onChange={value => setDateForwarded(new Date(value))}\n              />\n              </div>\n              <div class=\"flex-row\">\n            <label>Case ID</label>\n              <input\n                type='text' \n                className='form-control'\n                value={caseid} \n                onChange={e => setCaseId(e.target.value)}/>\n              </div>\n              <div class=\"flex-row\">\n              <label>Expedited</label>\n                <input\n                  type=\"checkbox\"\n                  style={{'display': 'inline'}}\n                  className='form-control'\n                  name='expedited'\n                  checked={expedited}\n                  onChange={e => setExpedited(!expedited)}/>\n              </div>\n              <div class=\"flex-row\">\n              <label>Patient ID</label>\n                <input \n                  type='text'\n                  className='form-control' \n                  value={patientid} \n                  onChange={e => setPatientId(e.target.value)}/>\n                  </div>\n              <div class=\"flex-row\">\n              <label>Insurer ID</label>\n                <input \n                  type='text'\n                  className='form-control' \n                  value={insurerid} \n                  onChange={e => setInsurerId(e.target.value)}/>\n                  </div>\n                  <div class=\"flex-row\">\n              <label>Provider ID</label>\n                <input \n                  type='text'\n                  className='form-control' \n                  value={providerid} \n                  onChange={e => setProviderId(e.target.value)}/>\n              </div>\n              <div class=\"flex-row\">\n              <label>IRO</label>\n                <DropdownList className='form-control'\n                    defaultValue={extcase.iroid}\n                    data={IROList}\n                    dataKey='id'\n                    textField='name'\n                    onChange={value => setIROId(value.id)}\n                />\n              </div>\n              <div class=\"flex-row\">\n              <label>Insurer</label>\n                <DropdownList className='form-control'\n                    defaultValue={extcase.insurerid}\n                    data={insurerList}\n                    dataKey='id'\n                    textField='name'\n                    onChange={value => setInsurerId(value.id)}\n                />\n              </div>\n              <div class=\"flex-row\">\n              <label>Denial Reason</label>\n              <input type=\"text\" \n                className=\"form-control\" \n                value={denialreason} \n                onChange={e => setDenialReason(e.target.value)}\n              />\n              </div>\n              <div class=\"flex-row\">\n              <label>Eligibility Notice</label>  \n                <DatePicker className='form-control'\n                  defaultValue={eligibilitynotice ? new Date(extcase.eligibilitynotice) : null}\n                  valueEditFormat={{ dateStyle: \"short\" }}\n                  valueDisplayFormat={{ dateStyle: \"medium\" }}\n                  onChange={value => setEligibilityNotice(new Date(value))}\n                />\n                </div>\n                <div class=\"flex-row\">\n              <label>Eligibility Correspondence</label>  \n                <DatePicker className='form-control'\n                  defaultValue={extcase.eligiblecorrespondence ? new Date(extcase.eligiblecorrespondence) : null}\n                  valueEditFormat={{ dateStyle: \"short\" }}\n                  valueDisplayFormat={{ dateStyle: \"medium\" }}\n                  onChange={value => setEligibleCorrespondence(new Date(value))}\n                />\n                </div>\n                <div class=\"flex-row\">\n              <label>Insurer Notified</label>  \n                <DatePicker className='form-control'\n                  defaultValue={extcase.insurernotified ? new Date(extcase.insurernotified) : null}\n                  valueEditFormat={{ dateStyle: \"short\" }}\n                  valueDisplayFormat={{ dateStyle: \"medium\" }}\n                  onChange={value => setInsurerNotified(new Date(value))}\n                />\n                </div>\n                <div class=\"flex-row\">\n              <label>Decision Date</label>\n                <DatePicker className='form-control'\n                  defaultValue={extcase.decisiondate ? new Date(extcase.decisiondate) : null}\n                  valueEditFormat={{ dateStyle: \"short\" }}\n                  valueDisplayFormat={{ dateStyle: \"medium\" }}\n                  onChange={value => setDecisionDate(new Date(value))}\n                />\n                </div>\n                <div class=\"flex-row\">\n              <label>IRO Decision</label>\n                <DropdownList className='form-control'\n                    defaultValue={extcase.irodecision}\n                    data={decisionOptions}\n                    onChange={value => setIRODecision(value)}\n                />\n                </div>\n                <div class=\"flex-row\">\n              <label>File Closed</label>\n                <DatePicker className='form-control'\n                  defaultValue={fileclosed ? new Date(extcase.fileclosed) : null}\n                  valueEditFormat={{ dateStyle: \"short\" }}\n                  valueDisplayFormat={{ dateStyle: \"medium\" }}\n                  onChange={value => setFileClosed(value)}\n                />\n                </div>\n                <div class=\"flex-row\">\n              <label>Invoice Amount</label>\n                <NumberPicker className='form-control'\n                  defaultValue={parseInt(invoiceamount)}\n                  step={50}\n                  max={2000}\n                  min={0}\n                  format={{ style: \"currency\", currency: \"USD\" }}\n                  onChange={value => setInvoiceAmount(parseInt(value))}\n                />\n                </div>\n                </div>\n\n        </Modal.Body>\n        <Modal.Footer>\n          <button type=\"button\" className=\"btn btn-dark\" onClick={handleClose}>\n            Close\n          </button>\n          <button type=\"button\" className=\"btn btn-info\" onClick={updateCase}>Update</button>\n        </Modal.Footer>\n      </Modal>\n      </Fragment>\n  );\n}\n\n\nexport default EditCaseModal;\n\n\n// d-flex makes sure the text field and the button are placed together side by side; mt-5 is margin-top 5\n// Instead of putting this in Add.js, we put in ListCases\n// Backticks = \"making it a template string\" allows you to put variables in strings - `$()`\n\n\n//Need to parse date data before sending to Postgres.  Its format from the form is the long date - need \n//it to be yyyy-mm-dd","import React, { Fragment, useState } from 'react';\nimport { insurerList, IROList, decisionOptions, Checkbox } from './utils.js';\nimport Modal from 'react-bootstrap/Modal'\nimport { getParsedDate } from './utils.js';\n\n\nconst ShowDetailsModal = ({ extcase }) => {\n\n\n  const [dateforwarded, setDateForwarded] = useState(extcase.dateforwarded);\n  const [caseid, setCaseId] = useState(extcase.caseid);\n  const [patientid, setPatientId] = useState(extcase.patientid);\n  const [rep, setRep] = useState(extcase.rep);\n  const [insurerid, setInsurerId] = useState(extcase.insurerid);\n  const [providerid, setProviderId] = useState(extcase.providerid);\n  const [denialreason, setDenialReason] = useState(extcase.denialreason);\n  const [iroid, setIROId] = useState(extcase.iroid);\n  const [expedited, setExpedited] = useState(extcase.expedited);\n  const [irodecision, setIRODecision] = useState(extcase.irodecision);\n  const [decisiondate, setDecisionDate] = useState(extcase.decisiondate);\n  const [eligibilitynotice, setEligibilityNotice] = useState(extcase.eligibilitynotice);\n  const [eligiblecorrespondence, setEligibleCorrespondence] = useState(extcase.eligiblecorrespondence);\n  const [insurernotified, setInsurerNotified] = useState(extcase.insurernotified);\n  const [fileclosed, setFileClosed] = useState(extcase.fileclosed);\n  const [invoiceamount, setInvoiceAmount] = useState(parseInt(extcase.invoiceamount));\n//rep is #4 which is underfined - in state when open edit - make sure that is not messing anything up\n\n  // Edit denialReason function\n  /*\n  const updateDenialReason = async (e) => {\n    e.preventDefault();\n    try{\n      const body = { denialreason };\n      const response = await fetch(`http://localhost:3001/eligiblecases/${extcase.caseid}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body)\n      })\n\n      Window.location = \"/\";\n\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n  */\n    const [show, setShow] = useState(false);\n  \n    const handleClose = () => {\n      setShow(false);\n      //window.location.reload();\n      //Want it to reload when an edit is done, so db can refresh (if needs to) but diable for now b/c not editing cases really\n    }\n    const handleShow = () => setShow(true);\n    const id_to_edit = extcase.caseid;\n\n    return (\n    <Fragment>\n      <a onClick={handleShow} value={id_to_edit} style={{cursor:'pointer', color:'blue', fontWeight:'bold'}}>\n        {extcase.caseid}\n      </a>\n\n      <Modal\n        show={show}\n        onHide={handleClose}\n        backdrop=\"static\"\n        keyboard={false}\n        size={'md'}\n        style={{\n          content:{\n            display: 'inline'\n          }\n        }}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Case Details</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n        <div className=\"mb-container\">\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Date Forwarded:</span> {getParsedDate(extcase.dateforwarded)}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Case ID:</span> {extcase.caseid}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Expedited:</span> {extcase.expedited}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Patient ID:</span> {extcase.patientid}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Insurer ID:</span> {extcase.insurerid}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Provider ID:</span> {extcase.providerid}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>IRO ID:</span> {extcase.iroid}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Denial Reason:</span> {extcase.denialreason}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Eligibility Notice:</span> {getParsedDate(extcase.eligibilitynotice)}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Eligibility Correspondence:</span> {getParsedDate(extcase.eligiblecorrespondence)}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Insurer Notified:</span> {getParsedDate(extcase.insurernotified)}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Decision Date:</span> {getParsedDate(extcase.decisiondate)}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>IRO Decision:</span> {extcase.irodecision}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>File Closed:</span> {getParsedDate(extcase.fileclosed)}</p>\n            <p><span style={{'color':'teal', 'margin-right':'20px'}}>Invoice Amount:</span> {extcase.invoiceamount}</p>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <button type=\"button\" className=\"btn btn-dark\" onClick={handleClose}>\n            Close\n          </button>\n        </Modal.Footer>\n      </Modal>\n      </Fragment>\n  );\n}\n\n\nexport default ShowDetailsModal;\n\n\n// d-flex makes sure the text field and the button are placed together side by side; mt-5 is margin-top 5\n// Instead of putting this in Add.js, we put in ListCases\n// Backticks = \"making it a template string\" allows you to put variables in strings - `$()`\n\n\n//Need to parse date data before sending to Postgres.  Its format from the form is the long date - need \n//it to be yyyy-mm-dd","import React, { Fragment, Component, useState } from 'react';\nimport Keycloak from 'keycloak-js';\n\n/*\nclass Secured extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { keycloak: null, authenticated: false, caseid: null };\n  }\n\n  componentDidMount() {\n    const keycloak = Keycloak('/keycloak.json');\n    keycloak.init({onLoad: 'login-required'}).then(authenticated => {\n      this.setState({ keycloak: keycloak, authenticated: authenticated })\n    })\n  }\n*/\nconst DeleteCase = ({ extcase }) => {\n\n  const [caseid, setCaseId] = useState(extcase.caseid);\n\n  // Delete case function\n  const deleteCase = async(caseid) => {\n    try {\n      const data = {caseid};\n      const response = await fetch(`http://localhost:3001/eligiblecases`, {\n        method: \"DELETE\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data)\n      })\n      console.log('deleteCase' + response);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }\n\n  // Had to made the data-target attrib different than what it was on Edit - if it matched both modals were the same, added an _\n    return (\n    <Fragment>\n      <button type=\"button\" className=\"btn btn-danger\" data-toggle=\"modal\" data-target={`#id_${extcase.caseid}`}>\n        Delete\n      </button>\n      {/* id = id01 or id02 etc... */}\n      <div className=\"modal\" id={`id_${extcase.caseid}`}>\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h2 className=\"modal-title\">Confirm Delete - Case {`${extcase.caseid}`}</h2>\n            </div>\n            <div className=\"modal-footer\">\n              <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\" onClick={e => deleteCase(extcase.caseid)}>Delete</button>\n              <button \n                type=\"button\" \n                className=\"btn btn-warning\" \n                data-dismiss=\"modal\" \n              >Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n    )\n}\n\n\nexport default DeleteCase;\n\n\n// d-flex makes sure the text field and the button are placed together side by side; mt-5 is margin-top 5\n// Instead of putting this in Add.js, we put in ListCases\n// Backticks = \"making it a template string\" allows you to put variables in strings - `$()`","import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Tooltip, OverlayTrigger } from 'react-bootstrap';\r\nimport EditCaseModal from './EditCaseModal';\r\nimport ShowDetailsModal from './ShowDetailsModal';\r\nimport EditCase from './EditCase';\r\nimport DeleteCase from './DeleteCase';\r\nimport ProviderTooltip from './ProviderTooltip';\r\nimport { getParsedDate } from './utils.js';\r\n\r\nconst ListCase = () => {\r\n\r\n\r\n  const [cases, setCases] = useState([]);\r\n  const [filteredCases, setFilteredCases] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState();\r\n  const [filterSearchTerm, setFilterSearchTerm] = useState();\r\n\r\n\r\n  const renderTooltip = (props) => (\r\n    <Tooltip id=\"button-tooltip\" {...props}>\r\n      {props}\r\n    </Tooltip>\r\n  );\r\n\r\n  // deleteCase function\r\n  const deleteCase = async(caseid) => {\r\n    try {\r\n      const data = {caseid};\r\n      const response = await fetch(`http://localhost:3001/eligiblecases`, {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data)\r\n      })\r\n      console.log('deleteCase' + response);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  }\r\n\r\n  const getCases = async() => {\r\n    try{\r\n      const response = await fetch(\"http://localhost:3001/eligiblecases\")\r\n      const jsonData = await response.json()\r\n\r\n      setCases(jsonData.rows); //Using setCases is the only way to change the state\r\n      setFilteredCases(jsonData.rows);\r\n    } catch (err) {\r\n      console.error(err.message)\r\n    }\r\n  }\r\n\r\n  const filterArray = (filterSearchTerm) => {\r\n      const keyword = filterSearchTerm;\r\n      console.log(keyword);\r\n      //Turn cases object into an array so that we can use filter function on it\r\n      const data = [...cases]\r\n      //const filtered = data.filter(entry => Object.values(entry).some(val => typeof val === \"string\" && val.includes(keyword)));\r\n      const filtered = data.filter(entry => {\r\n        return (entry.denialreason.includes(keyword) || entry.patientlname.includes(keyword) || entry.patientfname.includes(keyword))\r\n      });\r\n      console.log('Filtered:' + filtered);\r\n      setFilteredCases(filtered);\r\n  }\r\n\r\n  const getCase = async() => {\r\n    try{\r\n      let caseid = parseInt(prompt('Please enter Case ID'));\r\n      const response = await fetch(`http://localhost:3001/eligiblecases/${caseid}`)\r\n      const jsonData = await response.json()\r\n\r\n      setCases([jsonData]); //Using setCases is the only way to change the state -- Use an ARRAY for map to work\r\n    } catch (err) {\r\n      console.error(err.message)\r\n    }\r\n  }\r\n/*\r\n  searchTerm ? \r\n    filterArray()\r\n  :\r\n    console.log(\"No searchTerm\")\r\n*/\r\n  useEffect(() => {\r\n    getCases();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"listcase_frag\">\r\n  <Fragment>\r\n  <p style={{\"font-weight\": \"bold\", \"margin-top\": \"30px\", \"margin-bottom\": \"-50px\", \"margin-left\": \"400px\"}}>Filter via Denial Reason or Name (Case Sensative):</p>\r\n    <form className=\"d-flex mt-5\"> \r\n      <input \r\n        type=\"text\" \r\n        className=\"form-control\" \r\n        value={searchTerm}\r\n        onChange={e => setFilterSearchTerm(e.target.value)} \r\n      />\r\n      <button \r\n        className=\"btn btn-success\" \r\n          onClick={(e) => {\r\n          e.preventDefault();\r\n          console.log(filterSearchTerm);\r\n          //Updating the state is not instant; that is why it only works on the 2nd click; filter working though\r\n          //setSearchTerm(filterSearchTerm);\r\n          //console.log('FirstOnClickSearchTerm:' + searchTerm);\r\n          filterArray(filterSearchTerm);\r\n        }\r\n      }>Filter</button>\r\n      {\" \"}\r\n      <button\r\n        className=\"btn btn-dark\"\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          setFilteredCases(cases);\r\n          setSearchTerm(null);\r\n        }}\r\n      >Reset List</button>\r\n    </form>\r\n    {\" \"}\r\n <table className=\"table mt-5 text-center\">\r\n    <thead>\r\n      <tr>\r\n          <OverlayTrigger\r\n            placement=\"right\"\r\n            delay={{ show: 250, hide: 400 }}\r\n            overlay={renderTooltip('Click Case ID for Case Details')}\r\n          >\r\n        <th>Case ID</th>\r\n        </OverlayTrigger>\r\n        <th>Patient</th>\r\n        <th>Insurer</th>\r\n        <th>Provider</th>\r\n        <th>Denial Reason</th>\r\n        <th>Date Forwarded</th>\r\n        <th>Decision Date</th>\r\n        <th>IRO</th>\r\n        <th>IRO Decision</th>\r\n        <th>Edit</th>\r\n        <th>Delete</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {filteredCases.map(extcase => (\r\n        <tr key={extcase.caseid}>\r\n          <td><ShowDetailsModal extcase={extcase} /></td>\r\n          <td>{extcase.patientfname} {extcase.patientlname}</td>\r\n          <OverlayTrigger\r\n            placement=\"right\"\r\n            delay={{ show: 250, hide: 400 }}\r\n            overlay={renderTooltip(extcase.insurerid)}\r\n          >\r\n            <td>{extcase.insurername}</td>\r\n          </OverlayTrigger>\r\n          <OverlayTrigger\r\n            placement=\"right\"\r\n            delay={{ show: 250, hide: 400 }}\r\n            overlay={renderTooltip(extcase.providerid)}\r\n          >\r\n            <td>{extcase.providername}</td>\r\n          </OverlayTrigger>\r\n          <td>{extcase.denialreason}</td>\r\n          <td>{getParsedDate(extcase.dateforwarded)}</td>\r\n          <td>{getParsedDate(extcase.decisiondate)}</td>\r\n          <OverlayTrigger\r\n            placement=\"right\"\r\n            delay={{ show: 250, hide: 400 }}\r\n            overlay={renderTooltip(extcase.iroid)}\r\n          >\r\n            <td>{extcase.ironame}</td>\r\n          </OverlayTrigger>\r\n          <td>{extcase.irodecision}</td>\r\n          <td><EditCaseModal extcase={extcase} /></td>\r\n          <td><DeleteCase extcase={extcase} /></td>\r\n        </tr>\r\n      )\r\n)}\r\n    </tbody>\r\n  </table>\r\n  </Fragment>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default ListCase;\r\n// Map only works on arrays - when I do select with an inner join, I get a JSON back of objects, non array (use Postman to GET)\r\n// So access the rows property of that json to get the array of cases, but could only access it within the getCases function,\r\n// Couldnt get it to work within the cases.map function in the JSX\r\n\r\n// UseEffect will make a fetch request to the API everytime the component is rendered\r\n// He keeps adding await saying \"this takes time so we need to add await\"\r\n// useEffect makes continual requests, and we want to make sure if just makes one, so add the blank array as a callback\r\n// case is a keyword, so if you get TypeScript error (argument expression expected) that is why - use diff var name\r\n// Imports - when you see {} you are dealing with named imports (vs default ones)\r\n\r\n// ProviderTooltip being extracted out works, but the CSS is messed up.  The Overlay is behind the list of cases","import React from \"react\";\nimport '../styles/InputCase.css';\nimport InputCase from './InputCase.js';\n\nexport default class Modal extends React.Component {\n\n  showModal = () => {\n    this.setState({ show: true });\n  };\n  \n  hideModal = () => {\n    this.setState({ show: false });\n  };\n\n  handleChange = (e) => {\n    console.log('handleChange');\n  }\n\n  displayModal() {\n    if (this.state.show == false) {\n      console.log('nerfin');\n     } else {\n       console.log('sumpin');\n    <div className='modalAdd'>\n      <p>GOOD LORD</p>\n        <button className=\"btn btn-success\">Add</button>\n    <div>\n      <button\n      onClick={e => {\n        this.hideModal(e);\n      }}\n    >\n      Close\n    </button>\n  </div>\n  </div>\n    }\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      show: false,\n      caseid: '',\n      patient: '',\n    };\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n  }\n\n  render() {\n    return (\n      <div className='modals' style={{\"textAlign\": \"right\"}}>\n        <button style={{\"margin-right\": \"80px\"}}\n          onClick={e => {\n            this.showModal(e);\n          }}\n          >\n          Add Full Case\n        </button>\n        {!this.state.show ? ''\n        :\n        <div className='fullcase-modal'>\n          <InputCase />\n          <button className=\"btn-modal-close\" onClick={this.hideModal} style={{\"margin-right\": \"80px\"}}>Close</button>\n        </div>\n        }\n      </div>\n        )\n  }\n}\n","import React, { Fragment, useState } from 'react';\nimport { insurerList, Checkbox } from './utils.js';\nimport DatePicker from \"react-widgets/DatePicker\";\nimport DropdownList from \"react-widgets/DropdownList\";\n\nconst AddInitial = () => {\n\n  const [denialreason, setDenialReason] = useState(\"\");\n  const [dateforwarded, setDateForwarded] = useState(\"\");\n  const [caseid, setCaseId] = useState(\"\");\n  const [patientid, setPatientId] = useState(\"\");\n  const [rep, setRep] = useState(\"\");\n  const [insurerid, setInsurerId] = useState(\"\");\n  const [providerid, setProviderId] = useState(\"\");\n  const [expedited, setExpedited] = useState(\"\");\n  // Edit denialReason function\n\n  const addCase = async e => {\n    e.preventDefault();\n      try {\n        const data = {caseid, dateforwarded, patientid, insurerid, providerid, denialreason};\n        const response = await fetch(`http://localhost:3001/eligiblecases`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(data)\n        })\n        console.log('addCase' + response);\n        window.location.reload();\n        //Window.location = \"/\"; //This will make it refresh and show changes - instead of console.log\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n\n  \n    return (\n    <Fragment>\n      <button type=\"button\" className=\"btn btn-dark\" data-toggle=\"modal\" data-target=\"#add-initial\" style={{\"margin-bottom\": \"30px\", \"margin-left\": \"80px\"}}>\n        Add Initial\n      </button>\n      {/* id = id01 or id02 etc... */}\n      <div className=\"modal\" id=\"add-initial\">\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h4 className=\"modal-title\">Add Initial Case</h4>\n              <button \n                type=\"button\" \n                className=\"close\" \n                data-dismiss=\"modal\" \n              >&times;</button>\n            </div>\n        \n            <table className=\"modal-body\" style={{\"margin-top\": \"10px\"}}>\n            <tr>\n              <label>Date Forwarded</label>\n              <DatePicker className='form-control'\n                defaultValue={new Date()}\n                valueEditFormat={{ dateStyle: \"short\" }}\n                valueDisplayFormat={{ dateStyle: \"medium\" }}\n                onChange={value => setDateForwarded(value)}\n              />\n            </tr>\n            <tr>\n            <label>Case ID</label>\n              <input\n                type='text' \n                className='form-control'\n                value={caseid} \n                onChange={e => setCaseId(e.target.value)}/>\n            </tr>\n            <tr>\n              <li className=\"exp\">\n              <label for=\"exp_chk\" style={{'word-wrap': 'break-word'}}>Expedited\n              <Checkbox\n                id=\"exp_chk\"\n                className='form-control_exp'\n                name='expedited'\n                checked={expedited}\n                onChangeFunction={e => setExpedited(!expedited)}\n              />\n              </label>\n              </li>\n              </tr>\n              <tr>\n              <label>Patient ID</label>\n                <input \n                  type='text'\n                  className='form-control' \n                  value={patientid} \n                  onChange={e => setPatientId(e.target.value)}/>\n              </tr>\n              <tr>\n              <label>Provider ID</label>\n                <input \n                  type='text'\n                  className='form-control' \n                  value={providerid} \n                  onChange={e => setProviderId(e.target.value)}/>\n              </tr>\n              <tr>\n              <label>Insurer</label>\n                <DropdownList className='form-control'\n                    defaultValue={insurerid}\n                    data={insurerList}\n                    dataKey='id'\n                    textField='name'\n                    onChange={value => setInsurerId(value.id)}\n                />\n              </tr>\n              <tr>\n              <label>Denial Reason</label>\n                <input type=\"text\" \n                  className=\"form-control\" \n                  value={denialreason} \n                  onChange={e => setDenialReason(e.target.value)}\n                />\n              </tr>\n            </table>\n            <div className=\"modal-footer\">\n              <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={addCase}>Add Initial</button>\n              <button \n                type=\"button\" \n                className=\"btn btn-secondary\" \n                data-dismiss=\"modal\" \n              >Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n    )\n}\n\nexport default AddInitial;\n\n\n// d-flex makes sure the text field and the button are placed together side by side; mt-5 is margin-top 5\n// Instead of putting this in Add.js, we put in ListCases\n// Backticks = \"making it a template string\" allows you to put variables in strings - `$()`","import React, { Component } from \"react\";\n\nexport default class Footer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n    this.toggleMenu = this.toggleMenu.bind(this);\n  }\n\n  toggleMenu(){\n    this.setState({ modal: !this.state.modal })\n  }\n\n  render() {\n\n  const show = (this.state.modal) ? \"show\" : \"\" ;\n\n  return (\n\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"/\">Navbar</a>\n      <button className=\"navbar-toggler\" type=\"button\" onClick={ this.toggleMenu }>\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className={\"collapse navbar-collapse \" + show}>\n        <div className=\"navbar-nav\">\n          <a className=\"nav-item nav-link active\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n          <a className=\"nav-item nav-link\" href=\"/\">Features</a>\n          <a className=\"nav-item nav-link\" href=\"/\">Pricing</a>\n          <a className=\"nav-item nav-link\" href=\"/\">logout</a>\n        </div>\n      </div>\n    </nav>\n\n  );\n  }\n}","import Keycloak from \"keycloak-js\";\n\nconst _kc = new Keycloak('../keycloak.json');\n\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\nconst initKeycloak = (onAuthenticatedCallback) => {\n  _kc.init({\n    onLoad: 'check-sso',\n    //silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    silentCheckSsoRedirectUri: 'http://localhost:3000/eligiblecases',\n    silentCheckSsoFallback: false,\n    //onLoad: 'login-required',\n    pkceMethod: 'S256',\n  \n  })\n    .then((authenticated) => {\n       if (authenticated) {\n        console.log('authenticated');\n      //onAuthenticatedCallback();\n      //onAuthenicatedCallback() a placeholder - figure out what to do after login - display page\n       } else {\n         doLogin();\n       }\n    })\n    .catch(e => console.log(`keycloak init exception: ${e}`));\n};\n\nconst doLogin = _kc.login;\n\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst isLoggedIn = () => !!_kc.token;\n\nconst updateToken = (successCallback) =>\n  _kc.updateToken(5)\n    .then(successCallback)\n    .catch(doLogin);\n\nconst getUsername = () => _kc.tokenParsed?.preferred_username;\n\nconst hasRole = (roles) => roles.some((role) => _kc.hasRealmRole(role));\n\nconst UserService = {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  isLoggedIn,\n  getToken,\n  updateToken,\n  getUsername,\n  hasRole,\n};\n\nexport default UserService;\n","import React, { Fragment, useState } from 'react';\nconst Keycloak = require('C:/Users/aaroz/Node/node-postgres/node_modules/keycloak-connect/keycloak.js');\n\nconst Login = () => {\n\nfunction output(content) {\n  if (typeof content === 'object') {\n      content = JSON.stringify(content, null, 2)\n  }\n  document.getElementById('output').textContent = content;\n}\n\n\nfunction sendRequest() {\n  var req = new XMLHttpRequest();\n  req.onreadystatechange = function() {\n      if (req.readyState === 4) {\n          output(req.status + '\\n\\n' + req.responseText);\n      }\n  }\n  req.open('GET', 'SERVICE_URL', true);\n  req.setRequestHeader('Authorization', 'Bearer ' + kc.token);\n  req.send();\n}\n\nconst kc = new Keycloak({ realm: 'myrealm', clientId: 'myclient' });\nwindow.onload = function() {\n  kc.init().then(function() {\n      if(kc.authenticated) {\n          console.log(\"authenticated\");\n      } else {\n          console.log(\"not authenticated\");\n      }\n  });\n}\n\nreturn (\n  <Fragment>\n    <h1 className=\"text-center mt-5\">Login</h1>\n    <div id=\"anonymous\" style=\"display: none\">\n      <button onclick=\"window.kc.login()\">Login</button>\n    </div>\n  </Fragment>\n)\n\n}\n\nexport default Login;","import React, { Fragment, useState } from 'react';\nimport UserService from '../services/UserService.js';\n\nconst LogoutButton = () => {\n\nreturn (\n  <Fragment>\n    <button onClick={UserService.doLogout} style={{\"float\": \"left\", \"margin-left\": \"80px\"}}>\n      Logout\n    </button>\n    <label>Signed in as: KeycloakUser</label>\n  </Fragment>\n)\n\n}\n\nexport default LogoutButton;","import React, { Fragment, Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button } from './Buttons';\nimport axios from 'axios';\nimport './App.css';\n\n// Components\nimport Header from './components/Header';\nimport InputCase from './components/InputCase';\nimport ListCase from './components/ListCase';\nimport SearchCase from './components/SearchCase';\nimport ModalAdd from './components/ModalAdd';\nimport AddInitial from './components/AddInitial';\nimport Footer from './components/Footer';\nimport Login from './components/Login';\nimport LogoutButton from './components/LogoutButton';\nimport DataFetch from './components/DataFetch';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\",\n    };\n    //this.rotate = this.rotate.bind(this);\n  }\n  \n  render() {\n      return (\n        <div className='mainPage'>\n        \n        <Header className='header' />\n        {/*<Login />*/}\n        <LogoutButton />\n        <ModalAdd />\n        {/*<SearchCase />*/}\n        <AddInitial />\n        <ListCase />\n        <Footer />\n        </div>\n    )\n  }\n}\n\nexport default App;\n\n/*\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      casesJSON: null,\n      cases: null,\n      setCases: [],\n      userSelection: null,\n      reviewToAdd: {\n      },\n    };\n\n    this.clearCases = this.clearCases.bind(this);\n    this.getCases = this.getCases.bind(this);\n    this.getCasesJSON = this.getCasesJSON.bind(this);\n    this.getCaseJSON = this.getCaseJSON.bind(this);\n    this.createCase = this.createCase.bind(this);\n    this.deleteCase = this.deleteCase.bind(this);\n  }\n\n  clearCases() {\n    this.setState({ casesJSON: null });\n    this.setState({ cases: null });\n  }\n\n  getCases() {\n    fetch('http://localhost:3001')\n      .then(response => {\n        console.log('on then 1');\n        console.log(response);\n        return response.text();\n      })\n      .then(data => {\n        console.log('on then 2');\n        this.setState({ cases: data });\n      });\n  }\n\n  getCasesJSON() {\n    fetch('http://localhost:3001')\n      .then(response => {\n        console.log('on then 1');\n        console.log(response);\n        return response.json();\n      })\n      .then(data => {\n        console.log('on then 2');\n        this.setState({ casesJSON: data });\n      });\n  }\n\n  getCaseJSON() {\n    let caseid = prompt('Enter case id');\n    console.log(caseid);\n    fetch('http://localhost:3001', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      mode: 'cors',\n      body: {caseid},\n    })\n    .then(response => {\n      console.log('on then 1');\n      console.log(response)\n      return response.json();\n    })\n    .then(data => {\n      console.log('on then 2');\n      this.setState({ userSelection: data });\n    });\n}\n   \n\n    let caseid = prompt('Enter case id');\n    axios({\n      method: 'get',\n      url: 'http://localhost:3001',\n      caseid: {caseid}\n    })\n    .then(res => this.setState({userSelection: res.data }));\n    }\n\n  createCase() {\n    let caseid = prompt('Enter caseid');\n    let patientid = prompt('Enter patientid');\n    fetch('http://localhost:3001/eligiblecases', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({caseid, patientid}),\n    })\n      .then(response => {\n        return response.text();\n      })\n      .then(data => {\n        alert(data);\n        this.getCases();\n      });\n  }\n  deleteCase() {\n    let id = prompt('Enter case id');\n    fetch(`http://localhost:3001/eligiblecases/${id}`, {\n      method: 'DELETE',\n    })\n      .then(response => {\n        return response.text();\n      })\n      .then(data => {\n        alert(data);\n        this.getCases();\n      });\n  }\n\n  componentDidMount() {\n      console.log('compDidMount');\n      this.getCasesJSON();\n  }\n\n  render() {\n    const { cases, casesJSON, userSelection, blogs } = this.state;\n    return (\n    <div className=\"App\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <h1>External Review Dashboard</h1>\n    <Button\n          onClick={this.getCases}\n          className='getCases'\n          value='Get Cases'\n    />\n    <Button\n          onClick={this.getCasesJSON}\n          className='getCasesJSON'\n          value='Get Cases JSON'\n    />\n    <Button\n          onClick={this.clearCases}\n          className='clearCases'\n          value='Clear'\n    />\n    <Button\n          onClick={this.getCaseJSON}\n          className='getCase'\n          value='Get Case'\n    />\n    <Button\n          onClick={this.getCaseOne}\n          className='getCaseOne'\n          value='Get Case #1'\n    />\n    <div className=\"dataDisplay\">\n      {userSelection ? \n        (<div className=\"jsonTable\">\n        <JSONTable\n          list={userSelection}\n          fieldArray={fieldArray}\n        />\n        </div>)\n      : 'There is no userSelection'}\n      <br />\n      {cases ? cases : 'There is no case data available'}\n      <br />\n      {casesJSON ? \n        (<div className=\"jsonTable\">\n            <JSONTable\n              list={casesJSON}\n              fieldArray={fieldArray}\n            />\n        </div>)\n      : 'There is no JSON case data available'}\n      <br />\n      <div className=\"buttons\">\n      <Button\n          onClick={this.createCase}\n          className='createCase'\n          value='Add Case'\n      />\n      <br />\n      <Button\n          onClick={this.deleteCase}\n          className='deleteCase'\n          value='Delete Case'\n      />\n      </div>\n    </div> \n    </div>  end App div \n  );\n  }\n}\n\nexport default App;\n\n\nconst JSONTable = ({ list, fieldArray }) =>\n(!list.length) ? <div className=\"jsonTable\">No JSON</div> :\n<div className=\"table\">\n{list.map(item =>\n      <div key={item.caseid}>\n        <span>\n            {item.denialreason}\n            {item[fieldArray[0]]} -- {item[fieldArray[1]]} -- {item[fieldArray[2]]} -- {item[fieldArray[3]]}\n        </span>\n      </div>\n    )}\n    </div>\n\n\n\n\n\n--As in tutorial - function App() vs. class App extends Component ==\n==Where did setCases come from? Will it work with class App??\nIt did with a few adjustments.  Just used state for cases and setCases() method==\n\nimport React, {useState, useEffect} from 'react';\n\nfunction App() {\n  const [cases, setCases] = useState(false);\n  useEffect(() => {\n    getCases();\n    console.log(\"getCases firing\")\n  }, []);\n\nfunction getCases() {\n    fetch('http://localhost:3001')\n      .then(response => {\n        console.log('on then 1');\n        return response.text();\n      })\n      .then(data => {\n        console.log('on then 2');\n        setCases(data);\n      });\n  }\n  function createCase() {\n    let caseid = prompt('Enter caseid');\n    let patientid = prompt('Enter patientid');\n    fetch('http://localhost:3001/eligiblecases', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({caseid, patientid}),\n    })\n      .then(response => {\n        return response.text();\n      })\n      .then(data => {\n        alert(data);\n        getCases();\n      });\n  }\n  function deleteCase() {\n    let id = prompt('Enter case id');\n    fetch(`http://localhost:3001/eligiblecases/${id}`, {\n      method: 'DELETE',\n    })\n      .then(response => {\n        return response.text();\n      })\n      .then(data => {\n        alert(data);\n        getCases();\n      });\n  }\n  return (\n    <div>\n      {cases ? cases : 'There is no case data available'}\n      <br />\n      <button onClick={createCase}>Add case</button>\n      <br />\n      <button onClick={deleteCase}>Delete case</button>\n    </div>\n  );\n}\nexport default App;\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\nimport UserService from \"./UserService\";\n\nconst HttpMethods = {\n  GET: 'GET',\n  POST: 'POST',\n  DELETE: 'DELETE',\n};\n\nconst _axios = axios.create();\n\nconst configure = () => {\n  _axios.interceptors.request.use((config) => {\n    if (UserService.isLoggedIn()) {\n      const cb = () => {\n        config.headers.Authorization = `Bearer ${UserService.getToken()}`;\n        return Promise.resolve(config);\n      };\n      return UserService.updateToken(cb);\n    }\n  });\n};\n\nconst getAxiosClient = () => _axios;\n\nconst HttpService = {\n  HttpMethods,\n  configure,\n  getAxiosClient,\n};\n\nexport default HttpService;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport HttpService from \"./services/HttpService\";\nimport UserService from \"./services/UserService\";\n\nconst renderApp = ReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\nUserService.initKeycloak(renderApp);\nHttpService.configure();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}